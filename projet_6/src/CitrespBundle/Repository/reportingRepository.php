<?php

namespace CitrespBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;


/**
 * reportingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class reportingRepository extends \Doctrine\ORM\EntityRepository
{
  /**
   * Récupère les reportings qui ont été signalés en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingByReported($city)
  {
    $qb = $this->createQueryBuilder('r');

    $qb
      ->select('r')
      ->where('r.city = :city')
      ->setParameter('city', $city)
      ->andWhere('r.reportedCount > 0')
      ->orderBy('r.dateCreated','DESC')
    ;

    return $qb
      ->getQuery()
      ->getResult()
    ;
  }

  /**
   * Récupère les reportings qui ont été signalés et non modérés en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingByReportedWhereNotModerate($city)
  {
    $qb = $this->getReportingWhereResolvedLessOneMonth($city);


    $qb
      ->andWhere('r.reportedCount > 0')
      ->andWhere('r.moderate = false')
    ;

    return $qb;
  }

  /**
   * Retourne le nombre de reportings qui ont été signalés en fonction de la ville concernée
   * @param  [object] $city
   * @return [int]
   */
  public function getReportingByReportedNb($city)
  {
    $qb = $this->createQueryBuilder('r');

    $qb
      ->select('COUNT(r)')
      ->where('r.city = :city')
      ->setParameter('city', $city)
      ->andWhere('r.reportedCount > 0')
    ;

    return $qb
      ->getQuery()
      // ->getResult()
      ->getSingleScalarResult();
    ;
  }

  /**
   * Retourne le nombre de reportings qui ont été signalés et non modérés en fonction de la ville concernée
   * @param  [object] $city
   * @return [int]
   */
  public function getReportingByReportedNbWhereNotModerate($city)
  {
    // $qb = $this->createQueryBuilder('r');
    $qb = $this->getReportingWhereResolvedLessOneMonth($city);

    $qb
      ->select('COUNT(r)')
      ->setParameter('city', $city)
      ->andWhere('r.moderate = false')
      ->andWhere('r.reportedCount > 0')
    ;

    return $qb
      ->getQuery()
      // ->getResult()
      ->getSingleScalarResult();
    ;
  }


  /**
   * Récupère les reportings qui n'ont pas été modérés en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingNotModerate($city)
  {
    // $qb = $this->createQueryBuilder('r');

    $qb = $this->getReportingWhereResolvedLessOneMonth($city);

    $qb
      ->select('r')      
      ->andWhere('r.moderate = false')
      
    ;

    return $qb;
    //   ->getQuery()
    //   ->getResult()
    // ;
  }


  /**
   * Récupère les reportings qui ont été modérés en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingModerate($city)
  {
    $qb = $this->getReportingWhereResolvedLessOneMonth($city);

    $qb
      ->select('r')      
      ->andWhere('r.moderate = true')
    ;

    return $qb;
  }

  /**
   * Récupère une liste de reportings triés et paginés
   * @param  [object] $city
   * @param [int] $page [le numéro de la page]
   * @param [int] $nbPerPage [nombre de reporti,g par page]
   * @return [Paginator]
   */
  public function getAllPageIn($city, $page, $nbPerPage)
  {
    if (!is_numeric($page))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $page est incorecte (valeur : '.$page.')');
    }

    if ($page < 1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    if (!is_numeric($nbPerPage))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $nbPerPage est incorecte (valeur : '.$nbPerPage.')');
    }

    $qb = $this->getReportingWhereResolvedLessOneMonth($city);

    $query = $qb->getQuery();

    $firstResult = ($page - 1) * $nbPerPage;

    $query
      ->setFirstResult($firstResult)
      ->setMaxResults($nbPerPage)
    ;

    $paginator = new Paginator($query);

    if (($paginator->count() <= $firstResult) && $page !=1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    return $paginator;
  }



  /**
   * Récupère une liste de reportings non modérés triés et paginés
   * @param  [object] $city
   * @param [int] $page [le numéro de la page]
   * @param [int] $nbPerPage [nombre de reporti,g par page]
   * @return [Paginator]
   */
  public function getAllPageInWhereNotModerate($city, $page, $nbPerPage)
  {
    if (!is_numeric($page))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $page est incorecte (valeur : '.$page.')');
    }

    if ($page < 1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    if (!is_numeric($nbPerPage))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $nbPerPage est incorecte (valeur : '.$nbPerPage.')');
    }

    $qb = $this->getReportingNotModerate($city);
    

    $query = $qb->getQuery();

    $firstResult = ($page - 1) * $nbPerPage;

    $query
      ->setFirstResult($firstResult)
      ->setMaxResults($nbPerPage)
    ;

    $paginator = new Paginator($query);

    if (($paginator->count() <= $firstResult) && $page !=1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    return $paginator;
  }


  /**
   * Récupère une liste de reportings signalés et non modérés triés et paginés
   * @param  [object] $city
   * @param [int] $page [le numéro de la page]
   * @param [int] $nbPerPage [nombre de reporti,g par page]
   * @return [Paginator]
   */
  public function getAllPageInWhereReportedAndNotModerate($city, $page, $nbPerPage)
  {
    if (!is_numeric($page))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $page est incorecte (valeur : '.$page.')');
    }

    if ($page < 1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    if (!is_numeric($nbPerPage))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $nbPerPage est incorecte (valeur : '.$nbPerPage.')');
    }

    $qb = $this->getReportingByReportedWhereNotModerate($city);

    $query = $qb->getQuery();

    $firstResult = ($page - 1) * $nbPerPage;

    $query
      ->setFirstResult($firstResult)
      ->setMaxResults($nbPerPage)
    ;

    $paginator = new Paginator($query);

    if (($paginator->count() <= $firstResult) && $page !=1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    return $paginator;
  }


  /**
   * Récupère une liste de reportings modérés triés et paginés
   * @param  [object] $city
   * @param [int] $page [le numéro de la page]
   * @param [int] $nbPerPage [nombre de reporti,g par page]
   * @return [Paginator]
   */
  public function getAllPageInWhereModerate($city, $page, $nbPerPage)
  {
    if (!is_numeric($page))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $page est incorecte (valeur : '.$page.')');
    }

    if ($page < 1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    if (!is_numeric($nbPerPage))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $nbPerPage est incorecte (valeur : '.$nbPerPage.')');
    }

    $qb = $this->getReportingModerate($city);

    $query = $qb->getQuery();

    $firstResult = ($page - 1) * $nbPerPage;

    $query
      ->setFirstResult($firstResult)
      ->setMaxResults($nbPerPage)
    ;

    $paginator = new Paginator($query);

    if (($paginator->count() <= $firstResult) && $page !=1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    return $paginator;
  }



/**
   * Récupère les reportings dont la dateResolved a plus d'un mois en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingWhereResolvedMoreOneMonth($city)
  {
    $qb = $this->createQueryBuilder('r');

    $qb
      ->select('r')
      ->where('r.city = :city')
      ->setParameter('city', $city)
      ->andWhere('r.dateResolved < :date')
      ->setParameter('date', new \DateTime('-1 month'))
      
    ;    
  
  }


  /**
   * Récupère les reportings sauf ceux dont la dateResolved a plus d'un mois en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingWhereResolvedLessOneMonth($city)
  {
    $qb = $this->createQueryBuilder('r');

    $qb
      ->select('r')
      ->where('r.city = :city')
      ->setParameter('city', $city)
      ->andWhere('r.dateResolved > :date OR r.dateResolved is null')
      ->setParameter('date', new \DateTime('-1 month'))
      ->orderBy('r.dateCreated', 'DESC')
    ;      
    

    return $qb;
  }


  /**
   * Récupère les reportings resolved en fonction de la ville concernée
   * @param  [object] $city
   * @return [array]
   */
  public function getReportingsResolved($city)
  {
    $qb = $this->createQueryBuilder('r');

    $qb
      ->select('r')
      ->where('r.city = :city')
      ->setParameter('city', $city)
      ->andWhere('r.resolved = true')
      ->orderBy('r.dateCreated', 'DESC')
    ;      
    

    return $qb;
  }



  /**
   * Récupère une liste de reportings Résolus triés et paginés
   * @param  [object] $city
   * @param [int] $page [le numéro de la page]
   * @param [int] $nbPerPage [nombre de reporti,g par page]
   * @return [Paginator]
   */
  public function getAllPageInWhereResolved($city, $page, $nbPerPage)
  {
    if (!is_numeric($page))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $page est incorecte (valeur : '.$page.')');
    }

    if ($page < 1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    if (!is_numeric($nbPerPage))
    {
      throw new InvalidArgumentException('La valeur de l\'argument $nbPerPage est incorecte (valeur : '.$nbPerPage.')');
    }

    $qb = $this->getReportingsResolved($city);

    $query = $qb->getQuery();

    $firstResult = ($page - 1) * $nbPerPage;

    $query
      ->setFirstResult($firstResult)
      ->setMaxResults($nbPerPage)
    ;

    $paginator = new Paginator($query);

    if (($paginator->count() <= $firstResult) && $page !=1)
    {
      throw new NotFoundHttpException("la page demandée n\'existe pas");
    }

    return $paginator;
  }


}
