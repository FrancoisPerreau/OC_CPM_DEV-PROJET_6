{# src/CitrespBundle/Resources/views/Front/createReportingTemplate.html.twig #}

{% extends '@Citresp/layout.html.twig' %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" href="{{ asset('theme/css/sign-in.css') }}">
  <style>
    #map {
      min-height: 26.25rem;
    }
  </style>
{% endblock %}

{% block header %}
  {% embed "@Citresp/cityMapHeader.html.twig" %}{% endembed %}
  {% embed "@Citresp/Front/ariane.html.twig" %}{% endembed %}
{% endblock %}

{% block body %}



  <div class="container text-center">

    <div class="contaner-sign-in text-center">
      {% block form %}

      {% endblock %}


      <div class="">
        <p id="street_number"></p>
        <p id="route"></p>
        <p id="locality"></p>
        <p id="postal_code"></p>
        <p id="latitude"></p>
        <p id="longitude"></p>
      </div>
    </div>

  </div>

{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>

    // MAP
    var map;
    var city = {
      lat: {{ city.gpsLat }},
      lng: {{ city.gpsLng }}
    };
    // var marker; AUTOCOMPLETE
    var autocomplete;
    var autocompleteInput = (document.getElementById('register_reporting_autocompleteInput'));
    var autocompleteOptions = {
      types: ['geocode'],
      componentRestrictions: {
        'country': 'fr'
      }
    };

    // AUTOCOMPLETE DATA
    var componentData = {
      street_number: 'short_name',
      route: 'long_name',
      locality: 'long_name',
      postal_code: 'short_name'
    };

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 15,
        center: city,
        streetViewControl: false,
        mapTypeControl: false,
        panControl: false
      });

      {% for reporting in reportings %}

        var marker = new google.maps.Marker({
          position: {
            lat: {{ reporting.gpsLat }},
            lng: {{ reporting.gpsLng }}
          },
          map: map
        });
      {% endfor %}

      autocomplete = new google.maps.places.Autocomplete(autocompleteInput, autocompleteOptions);

      autocomplete.setFields(['address_components', 'geometry']);

      places = new google.maps.places.PlacesService(map);

      // Prefixer l'autocomplÃ©tion par le nom de la ville
      $(autocompleteInput).on('input', function() {
        var str = autocompleteInput.value;
        var prefix = '{{ city.name }} {{ city.zipcode }} - ';
        if (str.indexOf(prefix) == 0) {} else {
          if (prefix.indexOf(str) >= 0) {
            autocompleteInput.value = prefix;
          } else {
            autocompleteInput.value = prefix + str;
          }
        }
      });

      autocomplete.addListener('place_changed', fillInAddress);

    }

    function fillInAddress() {
      // Get the place details from the autocomplete object.
      var place = autocomplete.getPlace();

      // console.log(place.geometry.location);
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and pressed the Enter key, or the Place Details request failed.
        window.alert("No details available for input: '" + place.name + "'");
      };

      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(30);
      }
      var newMarker = new google.maps.Marker({map: map, position: place.geometry.location});
      newMarker.setPosition(place.geometry.location);
      newMarker.setVisible(true);

      for (var component in componentData) {
        document.getElementById(component).value = '';
        document.getElementById(component).disabled = false;
      }


      // Get each component of the address from the place details, and then fill-in the corresponding id
      // for (var i = 0; i < place.address_components.length; i++) {
      //   var addressType = place.address_components[i].types[0];
      //   // console.log(place.address_components[i]);
      //   if (componentData[addressType]) {
      //     var val = place.address_components[i][componentData[addressType]];
      //     document.getElementById(addressType).innerHTML = val;
      //   }
      // }

      var address = document.getElementById("register_reporting_address");
      var latitude = document.getElementById("register_reporting_gpsLat");
      var longitude = document.getElementById("register_reporting_gpsLng");

      // console.log(place.address_components);

      address.value = place.address_components[0]['short_name'] + ', ' + place.address_components[1]['short_name'];
      latitude.value = place.geometry.location.lat();
      longitude.value = place.geometry.location.lng();

      // console.log(address.value);
    }

  </script>

  <script src="https://maps.googleapis.com/maps/api/js?key={{googleApi}}&libraries=places&callback=initMap" async="async" defer="defer"></script>
{% endblock %}
