{# src/CitrespBundle/Resources/views/Front/createReportingTemplate.html.twig #}

{% extends '@Citresp/layout.html.twig' %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" href="{{ asset('theme/css/sign-in.css') }}">
  <style>
    #map {
      min-height: 26.25rem;
    }
  </style>
{% endblock %}

{% block header %}
  {% embed "@Citresp/cityMapHeader.html.twig" %}{% endembed %}
  {% embed "@Citresp/Front/ariane.html.twig" %}{% endembed %}
{% endblock %}

{% block body %}



  <div class="container text-center">

    <div class="contaner-sign-in text-center">
      {% block form %}

      {% endblock %}

  </div>

{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>

    // MAP
    var map;
    var city = {
      lat: {{ city.gpsLat }},
      lng: {{ city.gpsLng }}
    };

    var img;

    var zipcode = {{ city.zipcode }};
    console.log(zipcode);
    

    // var marker; AUTOCOMPLETE
    var autocomplete;
    var autocompleteInput = (document.getElementById('register_reporting_autocompleteInput'));
    var autocompleteOptions = {
      types: ['geocode'],
      componentRestrictions: {
        'country': 'fr',
               
      }
    };

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 15,
        center: city,
        streetViewControl: false,
        mapTypeControl: false,
        panControl: false
      });

      var bounds = new google.maps.LatLngBounds();


      var data = [];

    {% for reporting in reportings %} 
      data.push({
        id:'{{reporting.id}}',
        address: '{{reporting.address}}',
        category: '{{reporting.category.name}}',
        date: "{{ reporting.dateCreated|localizeddate('short', 'none', null) }}",
        lat: '{{ reporting.gpsLat }}',
        lng: '{{ reporting.gpsLng }}',
        status: '{{ reporting.status.id }}',
        link: "{{ path('show_reporting', {'slug': app.user.city.slug, 'reporting_id': reporting.id}) }}"
      });
    {% endfor %}


    data.forEach(function(element){ 
      var contentString = 
          '<div id="'+element.id+'">'+
            '<div id="siteNotice">'+
            '</div>'+
              '<h6 id="firstHeading" class="firstHeading">'+element.address+'</h6>'+
            '<div id="bodyContent">'+
              '<p><strong>'+element.category+'</strong><br>' + element.date+'</p>' +
              {# '<p><a href="'+element.link+'">Voir</a></p>'+ #}
            '</div>'+
          '</div>';

      var infowindow = new google.maps.InfoWindow({
        content: contentString
      });

      
      if (element.status == 4 ){
        img = "{{asset('theme/img/markers/marker_green.png')}}"
      } else if (element.status == 3){
        img = "{{asset('theme/img/markers/marker_blue.png')}}"
      } else if (element.status == 2){
        img = "{{asset('theme/img/markers/marker_orange.png')}}"
      } else {
        img = "{{asset('theme/img/markers/marker_red.png')}}"
      }
      
      var marker = new google.maps.Marker({
        position: {
          lat: Number(element.lat),
          lng: Number(element.lng),          
        },
        icon: img,
        map: map
      });   
    

      marker.addListener('mouseover', function() {
        infowindow.open(map, marker);
      });

      marker.addListener('mouseout', function() {
        infowindow.close(map, marker);
      });

       bounds.extend(marker.position); 
     
    });

      autocomplete = new google.maps.places.Autocomplete(autocompleteInput, autocompleteOptions);
      autocomplete.bindTo('bounds', map);


      autocomplete.setFields(['address_components', 'geometry']);

      places = new google.maps.places.PlacesService(map);

      autocomplete.addListener('place_changed', fillInAddress);

      {% if reportings is not empty %}
          map.fitBounds(bounds); 
      {% endif %}

    }

    function fillInAddress() {
      // Get the place details from the autocomplete object.
      var place = autocomplete.getPlace();

      
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and pressed the Enter key, or the Place Details request failed.
        window.alert("Cette adresse n'est pas valide : '" + place.name + "'");
      };

      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(30);
      }
      var newMarker = new google.maps.Marker({map: map, icon: img, position: place.geometry.location});
      newMarker.setPosition(place.geometry.location);
      newMarker.setVisible(true);      
    }

  </script>

  <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key={{googleApi}}&libraries=places&callback=initMap" async="async" defer="defer"></script>
{% endblock %}
