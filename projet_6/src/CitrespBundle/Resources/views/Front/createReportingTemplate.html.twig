{# src/CitrespBundle/Resources/views/Front/createReportingTemplate.html.twig #}

{% extends '@Citresp/layout.html.twig' %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" href="{{ asset('theme/css/sign-in.css') }}">
  <style>
    #map {
      min-height: 26.25rem;
    }
  </style>
{% endblock %}

{% block header %}
  {% embed "@Citresp/cityMapHeader.html.twig" %}{% endembed %}
  {% embed "@Citresp/Front/ariane.html.twig" %}{% endembed %}
{% endblock %}

{% block body %}



  <div class="container text-center">

    <div class="contaner-sign-in text-center">
      {% block form %}

      {% endblock %}

  </div>

{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>

    // MAP
    var map;
    var city = {
      lat: {{ city.gpsLat }},
      lng: {{ city.gpsLng }}
    };
    

    // var marker; AUTOCOMPLETE
    var autocomplete;
    var autocompleteInput = (document.getElementById('register_reporting_autocompleteInput'));
    var autocompleteOptions = {
      types: ['geocode'],
      componentRestrictions: {
        'country': 'fr',
        
      }
    };

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 15,
        center: city,
        streetViewControl: false,
        mapTypeControl: false,
        panControl: false
      });

      var bounds = new google.maps.LatLngBounds();


      {% for reporting in reportings %}

        var marker = new google.maps.Marker({
          position: {
            lat: {{ reporting.gpsLat }},
            lng: {{ reporting.gpsLng }}
          },
          map: map
        });

        bounds.extend(marker.position);

      {% endfor %}

      autocomplete = new google.maps.places.Autocomplete(autocompleteInput, autocompleteOptions);
      autocomplete.bindTo('bounds', map);


      autocomplete.setFields(['address_components', 'geometry']);

      places = new google.maps.places.PlacesService(map);

      autocomplete.addListener('place_changed', fillInAddress);

       map.fitBounds(bounds); 

    }

    function fillInAddress() {
      // Get the place details from the autocomplete object.
      var place = autocomplete.getPlace();

      
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and pressed the Enter key, or the Place Details request failed.
        window.alert("Cette adresse n'est pas valide : '" + place.name + "'");
      };

      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(30);
      }
      var newMarker = new google.maps.Marker({map: map, position: place.geometry.location});
      newMarker.setPosition(place.geometry.location);
      newMarker.setVisible(true);      
    }

  </script>

  <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key={{googleApi}}&libraries=places&callback=initMap" async="async" defer="defer"></script>
{% endblock %}
